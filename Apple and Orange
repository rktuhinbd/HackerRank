/*
 * Complete the 'countApplesAndOranges' function below.
 *
 * The function accepts following parameters:
 *  1. INTEGER s
 *  2. INTEGER t
 *  3. INTEGER a
 *  4. INTEGER b
 *  5. INTEGER_ARRAY apples
 *  6. INTEGER_ARRAY oranges
 */

// Complete the countApplesAndOranges function below.
fun countApplesAndOranges(s: Int, t: Int, a: Int, b: Int, apples: Array<Int>, oranges: Array<Int>): Unit {
    val startPointHome = s
    val endPointHome = t
    val appleLoc = a
    val orangeLoc = b
    var orangeOnHouse = 0
    var applesOnHouse = 0
    // Calculate of apples that fall on house
    for (element in apples) {
        var applePosition = appleLoc + element
        if (applePosition in startPointHome..endPointHome) {
            applesOnHouse++
        }
    }
    // Calculate of orange that fall on house
    for (element in oranges) {
        val item = element
        var orangePosition = orangeLoc + item
        if (orangePosition in startPointHome..endPointHome) {
            orangeOnHouse++
        }
    }
    println(applesOnHouse)
    println(orangeOnHouse)
}

fun main(args: Array<String>) {
    val first_multiple_input = readLine()!!.trimEnd().split(" ")

    val s = first_multiple_input[0].toInt()

    val t = first_multiple_input[1].toInt()

    val second_multiple_input = readLine()!!.trimEnd().split(" ")

    val a = second_multiple_input[0].toInt()

    val b = second_multiple_input[1].toInt()

    val third_multiple_input = readLine()!!.trimEnd().split(" ")

    val m = third_multiple_input[0].toInt()

    val n = third_multiple_input[1].toInt()

    val apples = readLine()!!.trimEnd().split(" ").map{ it.toInt() }.toTypedArray()

    val oranges = readLine()!!.trimEnd().split(" ").map{ it.toInt() }.toTypedArray()

    countApplesAndOranges(s, t, a, b, apples, oranges)
}
